local Plug = vim.fn['plug#']

vim.call('plug#begin')

-- status line
Plug 'nvim-lualine/lualine.nvim'
Plug 'nvim-tree/nvim-web-devicons'

-- telescope
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
-- $ sudo apt install ripgrep

-- claude-code.nvim
Plug 'nvim-lua/plenary.nvim'
Plug 'greggh/claude-code.nvim'

vim.call('plug#end')


-- clipboard共有
vim.opt.clipboard = "unnamedplus"

-- 行番号
vim.opt.number = true
vim.opt.relativenumber = true

-- status line
require('lualine').setup {
  options = {
    theme = 'nord'
  }
}

-- claude
require("claude-code").setup({
  -- Terminal window settings
  window = {
    split_ratio = 0.3,      -- Percentage of screen for the terminal window (height for horizontal, width for vertical splits)
    position = "rightbelow vsplit",  -- Position of the window: "botright", "topleft", "vertical", "rightbelow vsplit", etc.
    enter_insert = true,    -- Whether to enter insert mode when opening Claude Code
    hide_numbers = true,    -- Hide line numbers in the terminal window
    hide_signcolumn = true, -- Hide the sign column in the terminal window
  },
  -- File refresh settings
  refresh = {
    enable = true,           -- Enable file change detection
    updatetime = 100,        -- updatetime when Claude Code is active (milliseconds)
    timer_interval = 1000,   -- How often to check for file changes (milliseconds)
    show_notifications = true, -- Show notification when files are reloaded
  },
  -- Git project settings
  git = {
    use_git_root = true,     -- Set CWD to git root when opening Claude Code (if in git project)
  },
  -- Shell-specific settings
  shell = {
    separator = '&&',        -- Command separator used in shell commands
    pushd_cmd = 'pushd',     -- Command to push directory onto stack (e.g., 'pushd' for bash/zsh, 'enter' for nushell)
    popd_cmd = 'popd',       -- Command to pop directory from stack (e.g., 'popd' for bash/zsh, 'exit' for nushell)
  },
  -- Command settings
  command = "claude",        -- Command used to launch Claude Code
  -- Command variants
  command_variants = {
    -- Conversation management
    continue = "--continue", -- Resume the most recent conversation
    resume = "--resume",     -- Display an interactive conversation picker

    -- Output options
    verbose = "--verbose",   -- Enable verbose logging with full turn-by-turn output
  },
  -- Keymaps
  keymaps = {
    toggle = {
      normal = "<C-,>",       -- Normal mode keymap for toggling Claude Code, false to disable
      terminal = "<C-,>",     -- Terminal mode keymap for toggling Claude Code, false to disable
      variants = {
        continue = "<leader>cC", -- Normal mode keymap for Claude Code with continue flag
        verbose = "<leader>cV",  -- Normal mode keymap for Claude Code with verbose flag
      },
    },
    window_navigation = true, -- Enable window navigation keymaps (<C-h/j/k/l>)
    scrolling = true,         -- Enable scrolling keymaps (<C-f/b>) for page up/down
  }
})

-- 削除系のコマンドでレジスタが上書きされないようにする
vim.keymap.set('n', 'd', '"_d')
vim.keymap.set('n', 'D', '"_D')
vim.keymap.set('x', 'd', '"_d')
vim.keymap.set('n', 'c', '"_c')
vim.keymap.set('n', 'C', '"_C')
vim.keymap.set('n', 's', '"_s')
vim.keymap.set('n', 'S', '"_S')
vim.keymap.set('x', 'c', '"_c')
vim.keymap.set('x', 'C', '"_C')

-- xをdに置き換え(xはdlで置き換え)
vim.keymap.set('n', 'x', 'd')
vim.keymap.set('n', 'xx', 'dd')
vim.keymap.set('n', 'X', 'D')
vim.keymap.set('x', 'x', 'd')

-- 画面移動をEnterで
vim.keymap.set('n', '<CR><CR>', '<C-w><C-w>', { noremap = true, silent = true })

-- telescope
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<C-p>', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<D-p>', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<C-f>', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', '<D-f>', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', 'fb', builtin.buffers, { desc = 'Telescope buffers' })
vim.keymap.set('n', 'fh', builtin.help_tags, { desc = 'Telescope help tags' })


-- IME OFF設定
{{ if eq .chezmoi.os "linux" }}
-- /usr/local/bin/zenhanにzenhan.exeをコピーしておく
if vim.fn.executable("zenhan") == 1 then
  local function set_zenhan_off()
    vim.fn.system("zenhan 0")
  end
{{ else }}
if vim.fn.executable("im-select") == 1 then
  local function set_zenhan_off()
    vim.fn.system("im-select com.apple.keylayout.ABC")
  end
{{ end }}

  vim.api.nvim_create_autocmd("InsertLeave", {
    pattern = "*",
    callback = set_zenhan_off,
  })

  vim.api.nvim_create_autocmd("CmdlineLeave", {
    pattern = "*",
    callback = set_zenhan_off,
  })
end

